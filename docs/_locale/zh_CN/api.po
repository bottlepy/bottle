# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2012, Marcel Hellkamp
# This file is distributed under the same license as the Bottle package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Bottle 0.12-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-08-09 17:22\n"
"PO-Revision-Date: 2012-11-09 16:39+0800\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

# fbe35ab019974025ade6c7afb67ec0e9
#: ../../api.rst:3
msgid "API Reference"
msgstr "API参考"

# 07f8bab761f04aea8b9c9ecd467acdff
#: ../../api.rst:10
msgid ""
"This is a mostly auto-generated API. If you are new to bottle, you might "
"find the narrative :doc:`tutorial` more helpful."
msgstr ""
"这份文档几乎是全自动生成的。如果你刚接触bottle，也许 :doc:`tutorial` 会更有帮"
"助。"

# 60b4c8f092624c28907f8e014404266e
#: ../../api.rst:17
msgid "Module Contents"
msgstr ""

# 623845929cb84fb3922263ab0e1cf6d6
#: ../../api.rst:19
msgid "The module defines several functions, constants, and an exception."
msgstr ""

# 0360779739fe41d19735b61aa7654001
#: ../../../bottle.py:docstring of bottle.debug:1
msgid ""
"Change the debug level. There is only one debug level supported at the "
"moment."
msgstr ""

# 644c0a8eb325483696b60bed16c2df4a
#: ../../../bottle.py:docstring of bottle.run:1
msgid ""
"Start a server instance. This method blocks until the server terminates."
msgstr ""

# ba4e497a63924813b2ab8457a1916492
#: ../../../bottle.py:docstring of bottle.load:1
msgid "Import a module or fetch an object from a module."
msgstr ""

# 4d283ca03c2b4fdf8cfcd08dc8ade89f
#: ../../../bottle.py:docstring of bottle.load:3
msgid "``package.module`` returns `module` as a module object."
msgstr ""

# a4770e87e7f64c6e8ea511221fdda6d6
#: ../../../bottle.py:docstring of bottle.load:4
msgid "``pack.mod:name`` returns the module variable `name` from `pack.mod`."
msgstr ""

# 8de14751c87f4652902fa858c868c1e2
#: ../../../bottle.py:docstring of bottle.load:5
msgid "``pack.mod:func()`` calls `pack.mod.func()` and returns the result."
msgstr ""

# 0f4be93ee77340c89bd64e958f9522dd
#: ../../../bottle.py:docstring of bottle.load:7
msgid ""
"The last form accepts not only function calls, but any type of expression. "
"Keyword arguments passed to this function are available as local variables. "
"Example: ``import_string('re:compile(x)', x='[a-z]')``"
msgstr ""

# 8a6e30706f344350b925379e177df002
#: ../../../bottle.py:docstring of bottle.load_app:1
msgid ""
"Load a bottle application from a module and make sure that the import does "
"not affect the current default application, but returns a separate "
"application object. See :func:`load` for the target parameter."
msgstr ""

# e0839bf597c5432d98d9ff1364b794c6
#: ../../../bottle.py:docstring of bottle.request:1
msgid ""
"A thread-safe instance of :class:`LocalRequest`. If accessed from within a "
"request callback, this instance always refers to the *current* request (even "
"on a multithreaded server)."
msgstr ""

# 301be6b4c0db45d9828169e666cb4a87
#: ../../../bottle.py:docstring of bottle.response:1
msgid ""
"A thread-safe instance of :class:`LocalResponse`. It is used to change the "
"HTTP response for the *current* request."
msgstr ""

# 2182bbf9e89a407aa0fd3505735347c4
#: ../../../bottle.py:docstring of bottle.HTTP_CODES:1
msgid ""
"A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')"
msgstr ""

# 4e6bc011ddb0490c8f82636be99ccb9a
#: ../../api.rst:38
msgid ""
"Return the current :ref:`default-app`. Actually, these are callable "
"instances of :class:`AppStack` and implement a stack-like API."
msgstr ""

# 993cefb361da4f4f8d2888d9eb460653
#: ../../api.rst:42
msgid "Routing"
msgstr ""

# b5505727f5cf4beea9f751b5f60e64c4
#: ../../api.rst:44
msgid ""
"Bottle maintains a stack of :class:`Bottle` instances (see :func:`app` and :"
"class:`AppStack`) and uses the top of the stack as a *default application* "
"for some of the module-level functions and decorators."
msgstr ""

# 825650775f864ee19fa78603d427bdba
#: ../../api.rst:53
msgid ""
"Decorator to install a route to the current default application. See :meth:"
"`Bottle.route` for details."
msgstr ""

# e714829c069d4e138db734ab96085e8a
#: ../../api.rst:58
msgid ""
"Decorator to install an error handler to the current default application. "
"See :meth:`Bottle.error` for details."
msgstr ""

# 8f769dab5b9442e6ad49d3cb9f4754ef
#: ../../api.rst:62
msgid "WSGI and HTTP Utilities"
msgstr ""

# 34b4f8fb4f8e442aa28d8477a30d99a4
#: ../../../bottle.py:docstring of bottle.parse_date:1
msgid "Parse rfc1123, rfc850 and asctime timestamps and return UTC epoch."
msgstr ""

# 001de5f591de4f378d902641f9a03e90
#: ../../../bottle.py:docstring of bottle.parse_auth:1
msgid ""
"Parse rfc2617 HTTP authentication header string (basic) and return (user,"
"pass) tuple or None"
msgstr ""

# 2675c3c439fc45818d55c0fdbb191683
#: ../../../bottle.py:docstring of bottle.cookie_encode:1
msgid "Encode and sign a pickle-able object. Return a (byte) string"
msgstr ""

# 9eb5a61979b54811805b6fe53e3d3ee3
#: ../../../bottle.py:docstring of bottle.cookie_decode:1
msgid "Verify and decode an encoded string. Return an object or None."
msgstr ""

# 13f13118209b4b67b7894b428db9bde8
#: ../../../bottle.py:docstring of bottle.cookie_is_encoded:1
msgid "Return True if the argument looks like a encoded cookie."
msgstr ""

# 7d33d97d4fdb41398aef0d56d4a49250
#: ../../../bottle.py:docstring of bottle.yieldroutes:1
msgid ""
"Return a generator for routes that match the signature (name, args) of the "
"func parameter. This may yield more than one route if the function takes "
"optional keyword arguments. The output is best described by example::"
msgstr ""

# 1f2dbbce55f942beb1a0000a82f29c06
#: ../../../bottle.py:docstring of bottle.path_shift:1
msgid "Shift path fragments from PATH_INFO to SCRIPT_NAME and vice versa."
msgstr ""

# cbffed2b48824bb0b4fe9f26b454a260
#: ../../api.rst:80
msgid "Data Structures"
msgstr ""

# 7585a471a000456eb2970b4039f17ff6
#: ../../../bottle.py:docstring of bottle.MultiDict:1
msgid ""
"This dict stores multiple values per key, but behaves exactly like a normal "
"dict in that it returns only the newest value for any given key. There are "
"special methods available to access the full list of values."
msgstr ""

# 48ce9646c309413192f0cded0189750f
#: ../../../bottle.py:docstring of bottle.MultiDict.get:1
msgid "Return the most recent value for a key."
msgstr ""

# 6bc19fc65e4f475083fd1eb47c28bd51
#: ../../../bottle.py:docstring of bottle.MultiDict.append:1
msgid "Add a new value to the list of values for this key."
msgstr ""

# 76d54d9bb2fa476a9ba3e1fb47c48f75
#: ../../../bottle.py:docstring of bottle.MultiDict.replace:1
msgid "Replace the list of values with a single value."
msgstr ""

# 6b739bda1f2d47dead2c240ce156a52c
# 408d04186344473197fdfda230a11a43
#: ../../../bottle.py:docstring of bottle.MultiDict.getall:1
#: bottle.MultiDict.getlist:1
msgid "Return a (possibly empty) list of values for a key."
msgstr ""

# 096a32b3920840ae81aeb1b74df13937
#: ../../../bottle.py:docstring of bottle.MultiDict.getone:1
msgid "Aliases for WTForms to mimic other multi-dict APIs (Django)"
msgstr ""

# 568f7d1aa3de48b3b585c2ce4f507364
#: ../../../bottle.py:docstring of bottle.HeaderDict:1
msgid ""
"A case-insensitive version of :class:`MultiDict` that defaults to replace "
"the old value instead of appending it."
msgstr ""

# 33192248b67945f6ab3bdfaae1022853
#: ../../../bottle.py:docstring of bottle.FormsDict:1
msgid ""
"This :class:`MultiDict` subclass is used to store request form data. "
"Additionally to the normal dict-like item access methods (which return "
"unmodified data as native strings), this container also supports attribute-"
"like access to its values. Attributes are automatically de- or recoded to "
"match :attr:`input_encoding` (default: 'utf8'). Missing attributes default "
"to an empty string."
msgstr ""

# 5767896f774f4c0cbc60b12de9ebe4b4
#: ../../../bottle.py:docstring of bottle.FormsDict.input_encoding:1
msgid "Encoding used for attribute values."
msgstr ""

# 0f6a6fd12b4e432b85a28dc0cb33e6f5
#: ../../../bottle.py:docstring of bottle.FormsDict.recode_unicode:1
msgid ""
"If true (default), unicode strings are first encoded with `latin1` and then "
"decoded to match :attr:`input_encoding`."
msgstr ""

# bfe4e448783b491a90d44d940c065e06
#: ../../../bottle.py:docstring of bottle.FormsDict.decode:1
msgid ""
"Returns a copy with all keys and values de- or recoded to match :attr:"
"`input_encoding`. Some libraries (e.g. WTForms) want a unicode dictionary."
msgstr ""

# 7fc82cc9c0834b7da08e3b3860e1a9d6
#: ../../../bottle.py:docstring of bottle.FormsDict.getunicode:1
msgid "Return the value as a unicode string, or the default."
msgstr ""

# 19ac58e686224a19b67845c5061582f2
#: ../../../bottle.py:docstring of bottle.WSGIHeaderDict:1
msgid ""
"This dict-like class wraps a WSGI environ dict and provides convenient "
"access to HTTP_* fields. Keys and values are native strings (2.x bytes or 3."
"x unicode) and keys are case-insensitive. If the WSGI environment contains "
"non-native string values, these are de- or encoded using a lossless 'latin1' "
"character set."
msgstr ""

# eec339b8e4ac4faca373130a77190a85
#: ../../../bottle.py:docstring of bottle.WSGIHeaderDict:7
msgid ""
"The API will remain stable even on changes to the relevant PEPs. Currently "
"PEP 333, 444 and 3333 are supported. (PEP 444 is the only one that uses non-"
"native strings.)"
msgstr ""

# 693b370f02d74df0b1e7851290f831ed
#: ../../../bottle.py:docstring of bottle.WSGIHeaderDict.cgikeys:1
msgid "List of keys that do not have a ``HTTP_`` prefix."
msgstr ""

# 0c70f44ff2a543bc92035a4a1578505b
#: ../../../bottle.py:docstring of bottle.WSGIHeaderDict.raw:1
msgid "Return the header value as is (may be bytes or unicode)."
msgstr ""

# bd725bbc2a0c4b508fe46abf350a0661
#: ../../../bottle.py:docstring of bottle.AppStack:1
msgid "A stack-like list. Calling it returns the head of the stack."
msgstr ""

# 379355eb37684a51837275ae5bcf062c
#: ../../api.rst:99
msgid "Return the current default application and remove it from the stack."
msgstr ""

# 1650474558c047ae8ce151129af31a3e
#: ../../../bottle.py:docstring of bottle.AppStack.push:1
msgid "Add a new :class:`Bottle` instance to the stack"
msgstr ""

# 19a9f2b2e67a4983a1c300631f14ad2c
#: ../../../bottle.py:docstring of bottle.ResourceManager:1
msgid ""
"This class manages a list of search paths and helps to find and open "
"application-bound resources (files)."
msgstr ""

# 2196cd941c6646f586f7c4990cc9e99d
#: ../../../bottle.py:docstring of bottle.ResourceManager.path:1
msgid "A list of search paths. See :meth:`add_path` for details."
msgstr ""

# 25c2e942f3174e4080e1051805eef350
#: ../../../bottle.py:docstring of bottle.ResourceManager.cache:1
msgid "A cache for resolved paths. ``res.cache.clear()`` clears the cache."
msgstr ""

# 84f7c5ef07074d959c37d62815af0f71
#: ../../../bottle.py:docstring of bottle.ResourceManager.add_path:1
msgid ""
"Add a new path to the list of search paths. Return False if the path does "
"not exist."
msgstr ""

# d5787be650274ae99b6d45a61dbeb300
#: ../../../bottle.py:docstring of bottle.ResourceManager.add_path:12
msgid ""
"The `base` parameter makes it easy to reference files installed along with a "
"python module or package::"
msgstr ""

# 6aaae04bb6304323bed63f45614eb041
#: ../../../bottle.py:docstring of bottle.ResourceManager.lookup:1
msgid "Search for a resource and return an absolute file path, or `None`."
msgstr ""

# 88d250b10df24f0aa72ae15640d2f274
#: ../../../bottle.py:docstring of bottle.ResourceManager.lookup:3
msgid ""
"The :attr:`path` list is searched in order. The first match is returend. "
"Symlinks are followed. The result is cached to speed up future lookups."
msgstr ""

# ffc785d1770d40aa872ea22d52233c02
#: ../../../bottle.py:docstring of bottle.ResourceManager.open:1
msgid "Find a resource and return a file object, or raise IOError."
msgstr ""

# fcec5a93e13a48b68e251a6a8f94d74f
#: ../../../bottle.py:docstring of bottle.FileUpload.file:1
msgid "Open file(-like) object (BytesIO buffer or temporary file)"
msgstr ""

# 48ffa5c976f245d0becc21a9e2c62bb6
#: ../../../bottle.py:docstring of bottle.FileUpload.name:1
msgid "Name of the upload form field"
msgstr ""

# 2a94d248a0804134b8b2950ee6872a16
#: ../../../bottle.py:docstring of bottle.FileUpload.raw_filename:1
msgid "Raw filename as sent by the client (may contain unsafe characters)"
msgstr ""

# e6845621bb9d42ccba141441bc8a5bc5
#: ../../../bottle.py:docstring of bottle.FileUpload.headers:1
msgid "A :class:`HeaderDict` with additional headers (e.g. content-type)"
msgstr ""

# ec33f9a869df439ab4ca59a460350271
#: ../../../bottle.py:docstring of bottle.FileUpload.content_type:1
#: bottle.BaseResponse.content_type:1
msgid "Current value of the 'Content-Type' header."
msgstr ""

# 001c6d13b2db4841b81f6b23b55a4fcb
#: ../../../bottle.py:docstring of bottle.FileUpload.content_length:1
#: bottle.BaseResponse.content_length:1
msgid "Current value of the 'Content-Length' header."
msgstr ""

# 44d2df642fd545b08b622a73a84bd9e6
#: ../../../bottle.py:docstring of bottle.FileUpload.filename:1
msgid ""
"Name of the file on the client file system, but normalized to ensure file "
"system compatibility (lowercase, no whitespace, no path separators, no "
"unsafe characters, ASCII only). An empty filename is returned as 'empty'."
msgstr ""

# ba76ee38fe954b458ba7e961b3caad15
#: ../../../bottle.py:docstring of bottle.FileUpload.save:1
msgid ""
"Save file to disk or copy its content to an open file(-like) object. If "
"*destination* is a directory, :attr:`filename` is added to the path. "
"Existing files are not overwritten by default (IOError)."
msgstr ""

# 841c0e821e284d91b7b014ab046f0b29
#: ../../api.rst:108
msgid "Exceptions"
msgstr ""

# 2fd091069448414fa46126c820382bb2
#: ../../../bottle.py:docstring of bottle.BottleException:1
msgid "A base class for exceptions used by bottle."
msgstr ""

# acafc1e6403e44b4bd5821201cdb82fa
#: ../../api.rst:116
msgid "The :class:`Bottle` Class"
msgstr ""

# a3d6dd8f70bf4874a14cea66590f4096
#: ../../../bottle.py:docstring of bottle.Bottle:1
msgid ""
"Each Bottle object represents a single, distinct web application and "
"consists of routes, callbacks, plugins, resources and configuration. "
"Instances are callable WSGI applications."
msgstr ""

# e316cd279454454186fd767fe6663083
#: ../../../bottle.py:docstring of bottle.Bottle.config:1
msgid "A :class:`ConfigDict` for app specific configuration."
msgstr ""

# a54618bbe184416ea06fe641e3bc581f
#: ../../../bottle.py:docstring of bottle.Bottle.resources:1
msgid "A :class:`ResourceManager` for application files"
msgstr ""

# c85fb189289d4452994f37a93d29aa04
#: ../../../bottle.py:docstring of bottle.Bottle.catchall:1
msgid "If true, most exceptions are caught and returned as :exc:`HTTPError`"
msgstr ""

# a153859ed6604e65ba9a9681e700a76f
#: ../../../bottle.py:docstring of bottle.Bottle.add_hook:1
msgid "Attach a callback to a hook. Three hooks are currently implemented:"
msgstr ""

# 6dc152c60013420abdb297caa28a3813
#: ../../../bottle.py:docstring of bottle.Bottle.add_hook:4
msgid "before_request"
msgstr ""

# 70abd3193e50425e82f98b3f68d4e4dc
#: ../../../bottle.py:docstring of bottle.Bottle.add_hook:4
msgid ""
"Executed once before each request. The request context is available, but no "
"routing has happened yet."
msgstr ""

# b8d91a10af2343399eaa8574f904e5d9
#: ../../../bottle.py:docstring of bottle.Bottle.add_hook:6
msgid "after_request"
msgstr ""

# 0e85cfc0a3bb4d9b97b68ae264a44ee3
#: ../../../bottle.py:docstring of bottle.Bottle.add_hook:7
msgid "Executed once after each request regardless of its outcome."
msgstr ""

# b580af375d614432bd1ac5e0f35f18fd
#: ../../../bottle.py:docstring of bottle.Bottle.add_hook:8
msgid "app_reset"
msgstr ""

# 9ce7e89d4e41419e85f0d9c338117c8c
#: ../../../bottle.py:docstring of bottle.Bottle.add_hook:9
msgid "Called whenever :meth:`Bottle.reset` is called."
msgstr ""

# 145ccba16d8f47729e885aa264b33a8f
#: ../../../bottle.py:docstring of bottle.Bottle.remove_hook:1
msgid "Remove a callback from a hook."
msgstr ""

# 55678852dd1541bda6a38d2d4f7902c0
#: ../../../bottle.py:docstring of bottle.Bottle.trigger_hook:1
msgid "Trigger a hook and return a list of results."
msgstr ""

# ec7d6127e3f44524bf25ce39f47a1fc8
#: ../../../bottle.py:docstring of bottle.Bottle.hook:1
msgid ""
"Return a decorator that attaches a callback to a hook. See :meth:`add_hook` "
"for details."
msgstr ""

# c071e835d9914cd1a24b606e57fc6e12
#: ../../../bottle.py:docstring of bottle.Bottle.mount:1
msgid ""
"Mount an application (:class:`Bottle` or plain WSGI) to a specific URL "
"prefix. Example::"
msgstr ""

# 9cc033bb984f4703867893d82058b6b5
#: ../../../bottle.py:docstring of bottle.Bottle.mount:10
msgid "All other parameters are passed to the underlying :meth:`route` call."
msgstr ""

# ee990c4498394cb0acea5c9be5e7923f
#: ../../../bottle.py:docstring of bottle.Bottle.merge:1
msgid ""
"Merge the routes of another :class:`Bottle` application or a list of :class:"
"`Route` objects into this application. The routes keep their 'owner', "
"meaning that the :data:`Route.app` attribute is not changed."
msgstr ""

# 522ef1b9d92149f99b4eb66e81700835
#: ../../../bottle.py:docstring of bottle.Bottle.install:1
msgid ""
"Add a plugin to the list of plugins and prepare it for being applied to all "
"routes of this application. A plugin may be a simple decorator or an object "
"that implements the :class:`Plugin` API."
msgstr ""

# 1f920e670f1f42bdb182fa5ee6892b9d
#: ../../../bottle.py:docstring of bottle.Bottle.uninstall:1
msgid ""
"Uninstall plugins. Pass an instance to remove a specific plugin, a type "
"object to remove all plugins that match that type, a string to remove all "
"plugins with a matching ``name`` attribute or ``True`` to remove all "
"plugins. Return the list of removed plugins."
msgstr ""

# b0f6b824b5bb48f5a73ce8df7cf1ecd2
#: ../../../bottle.py:docstring of bottle.Bottle.reset:1
msgid ""
"Reset all routes (force plugins to be re-applied) and clear all caches. If "
"an ID or route object is given, only that specific route is affected."
msgstr ""

# ea0b9e9a1cd845499900b9ae0650c1c9
#: ../../../bottle.py:docstring of bottle.Bottle.close:1
msgid "Close the application and all installed plugins."
msgstr ""

# 9d904857add44dacbd2351fa34a9416d
#: ../../../bottle.py:docstring of bottle.Bottle.run:1
msgid "Calls :func:`run` with the same parameters."
msgstr ""

# 579b86a9a0e74698b0bfa8685ae73562
#: ../../../bottle.py:docstring of bottle.Bottle.match:1
msgid ""
"Search for a matching route and return a (:class:`Route` , urlargs) tuple. "
"The second value is a dictionary with parameters extracted from the URL. "
"Raise :exc:`HTTPError` (404/405) on a non-match."
msgstr ""

# 8c65d88c42384c8fbe1461b738be7328
#: ../../../bottle.py:docstring of bottle.Bottle.get_url:1
msgid "Return a string that matches a named route"
msgstr ""

# f53b92832d0e44f38c78840aa20acd93
#: ../../../bottle.py:docstring of bottle.Bottle.add_route:1
msgid "Add a route object, but do not change the :data:`Route.app` attribute."
msgstr ""

# 5855345f15e54935b5961c491f4df1c8
#: ../../../bottle.py:docstring of bottle.Bottle.route:1
msgid "A decorator to bind a function to a request URL. Example::"
msgstr ""

# a6a690e885a849a1b6784d0271d763a0
#: ../../../bottle.py:docstring of bottle.Bottle.route:7
msgid ""
"The ``:name`` part is a wildcard. See :class:`Router` for syntax details."
msgstr ""

# bf69fcb9e82e4aba84d8b46bb8f44c10
#: ../../../bottle.py:docstring of bottle.Bottle.route:23
msgid ""
"Any additional keyword arguments are stored as route-specific configuration "
"and passed to plugins (see :meth:`Plugin.apply`)."
msgstr ""

# aaa09cd9b5654107b3550272d034b590
#: ../../../bottle.py:docstring of bottle.Bottle.get:1
msgid "Equals :meth:`route`."
msgstr ""

# c3b3f1634a874a0791c7bc2e3e15d45a
#: ../../../bottle.py:docstring of bottle.Bottle.post:1
msgid "Equals :meth:`route` with a ``POST`` method parameter."
msgstr ""

# 2178c890ba6445439171493fef9e111f
#: ../../../bottle.py:docstring of bottle.Bottle.put:1
msgid "Equals :meth:`route` with a ``PUT`` method parameter."
msgstr ""

# da82d3802c7944eb99c426e6a86596a7
#: ../../../bottle.py:docstring of bottle.Bottle.delete:1
msgid "Equals :meth:`route` with a ``DELETE`` method parameter."
msgstr ""

# be193cc1118748e588bda1eb93dc0b18
#: ../../../bottle.py:docstring of bottle.Bottle.error:1
msgid "Decorator: Register an output handler for a HTTP error code"
msgstr ""

# ae4266c2a37f43f1b1fd10db27745ebf
#: ../../../bottle.py:docstring of bottle.Bottle.handle:1
msgid ""
"(deprecated) Execute the first matching route callback and return the "
"result. :exc:`HTTPResponse` exceptions are caught and returned. If :attr:"
"`Bottle.catchall` is true, other exceptions are caught as well and returned "
"as :exc:`HTTPError` instances (500)."
msgstr ""

# 505b97c9c9f74ed8a9cfdbfc5d39e9fe
#: ../../../bottle.py:docstring of bottle.Bottle.wsgi:1
msgid "The bottle WSGI-interface."
msgstr ""

# 6dbe117230bb473fafbf45d5a7c1a6bb
#: ../../../bottle.py:docstring of bottle.Route:1
msgid ""
"This class wraps a route callback along with route specific metadata and "
"configuration and applies Plugins on demand. It is also responsible for "
"turing an URL path rule into a regular expression usable by the Router."
msgstr ""

# a4b55c71f2544e7ea88dec1b381f5bd1
#: ../../../bottle.py:docstring of bottle.Route.app:1
msgid "The application this route is installed to."
msgstr ""

# 96261d8a5d9845afa58ce6187e958ee9
#: ../../../bottle.py:docstring of bottle.Route.rule:1
msgid "The path-rule string (e.g. ``/wiki/:page``)."
msgstr ""

# 524c69435594465b9c01e66ec6e366e4
#: ../../../bottle.py:docstring of bottle.Route.method:1
msgid "The HTTP method as a string (e.g. ``GET``)."
msgstr ""

# bf67f447b9c84beca14f9a581bbee99b
#: ../../../bottle.py:docstring of bottle.Route.callback:1
msgid ""
"The original callback with no plugins applied. Useful for introspection."
msgstr ""

# ced088a30a0c4bfabc944af22e2f5d30
#: ../../../bottle.py:docstring of bottle.Route.name:1
msgid "The name of the route (if specified) or ``None``."
msgstr ""

# f949e89c75fe47229c191f89c17196d0
#: ../../../bottle.py:docstring of bottle.Route.plugins:1
msgid "A list of route-specific plugins (see :meth:`Bottle.route`)."
msgstr ""

# c0cb7ea593dc4db5b0e279da0fe5ef42
#: ../../../bottle.py:docstring of bottle.Route.skiplist:1
msgid ""
"A list of plugins to not apply to this route (see :meth:`Bottle.route`)."
msgstr ""

# 8bb3cca930af481f8ca44da2c39ceefc
#: ../../../bottle.py:docstring of bottle.Route.config:1
msgid ""
"Additional keyword arguments passed to the :meth:`Bottle.route` decorator "
"are stored in this dictionary. Used for route-specific plugin configuration "
"and meta-data."
msgstr ""

# 0943215c952f4b53b91d4630599c798c
#: ../../../bottle.py:docstring of bottle.Route.call:1
msgid ""
"The route callback with all plugins applied. This property is created on "
"demand and then cached to speed up subsequent requests."
msgstr ""

# 498d6f0a85a541eba29a8f48855750f7
#: ../../../bottle.py:docstring of bottle.Route.reset:1
msgid ""
"Forget any cached values. The next time :attr:`call` is accessed, all "
"plugins are re-applied."
msgstr ""

# f873381927a84bceaf58eee4ff90c5d6
#: ../../../bottle.py:docstring of bottle.Route.prepare:1
msgid "Do all on-demand work immediately (useful for debugging)."
msgstr ""

# d63a0238d0634d47b8e5aec45248be7c
#: ../../../bottle.py:docstring of bottle.Route.all_plugins:1
msgid "Yield all Plugins affecting this route."
msgstr ""

# 1ec3c38fbcb849b1b43263e370ffd136
#: ../../../bottle.py:docstring of bottle.Route.get_undecorated_callback:1
msgid ""
"Return the callback. If the callback is a decorated function, try to recover "
"the original function."
msgstr ""

# d3c5328a4cab44989c52d2127b3544b4
#: ../../../bottle.py:docstring of bottle.Route.get_callback_args:1
msgid ""
"Return a list of argument names the callback (most likely) accepts as "
"keyword arguments. If the callback is a decorated function, try to recover "
"the original function before inspection."
msgstr ""

# 96aa046ca3da4f6e8ee873d30bba2a36
#: ../../../bottle.py:docstring of bottle.Route.get_config:1
msgid ""
"Lookup a config field and return its value, first checking the route.config, "
"then route.app.config."
msgstr ""

# 62603aa4019e4732a6caa0083f27ceee
#: ../../api.rst:126
msgid "The :class:`Request` Object"
msgstr ""

# 39128b7c74ed400e9a103a6b37e84b43
#: ../../api.rst:128
msgid ""
"The :class:`Request` class wraps a WSGI environment and provides helpful "
"methods to parse and access form data, cookies, file uploads and other "
"metadata. Most of the attributes are read-only."
msgstr ""

# da1e3ca7fd8143bd99c098bd62ce6f1b
#: ../../../bottle.py:docstring of bottle.BaseRequest:1
msgid ""
"A wrapper for WSGI environment dictionaries that adds a lot of convenient "
"access methods and properties. Most of them are read-only."
msgstr ""

# 145f7050a42a494f9dbc28a25c402150
#: ../../../bottle.py:docstring of bottle.BaseRequest:4
msgid ""
"Adding new attributes to a request actually adds them to the environ "
"dictionary (as 'bottle.request.ext.<name>'). This is the recommended way to "
"store and access request-specific data."
msgstr ""

# 199355247ef144f4ba61954e5936825d
#: ../../../bottle.py:docstring of bottle.BaseRequest.MEMFILE_MAX:1
msgid "Maximum size of memory buffer for :attr:`body` in bytes."
msgstr ""

# e0bbf2db8195408a977035a5a884d0da
#: ../../../bottle.py:docstring of bottle.BaseRequest.MAX_PARAMS:1
msgid "Maximum number pr GET or POST parameters per request"
msgstr ""

# ef1ff6ae9a0541e8b9d7e7f747f57b3d
#: ../../../bottle.py:docstring of bottle.BaseRequest.environ:1
msgid ""
"The wrapped WSGI environ dictionary. This is the only real attribute. All "
"other attributes actually are read-only properties."
msgstr ""

# af4ebeade1b94633be302638a1c5d543
#: ../../../bottle.py:docstring of bottle.BaseRequest.app:1
msgid "Bottle application handling this request."
msgstr ""

# c41f7380550042b4ac7111a188a88f77
#: ../../../bottle.py:docstring of bottle.BaseRequest.route:1
msgid "The bottle :class:`Route` object that matches this request."
msgstr ""

# 0aeb079900744334aebdf19893cc043c
#: ../../../bottle.py:docstring of bottle.BaseRequest.url_args:1
msgid "The arguments extracted from the URL."
msgstr ""

# 037aee056fb248628a52cf2447ab4c82
#: ../../../bottle.py:docstring of bottle.BaseRequest.path:1
msgid ""
"The value of ``PATH_INFO`` with exactly one prefixed slash (to fix broken "
"clients and avoid the \"empty path\" edge case)."
msgstr ""

# e40998f41ff342d09e6699927a460971
#: ../../../bottle.py:docstring of bottle.BaseRequest.method:1
msgid "The ``REQUEST_METHOD`` value as an uppercase string."
msgstr ""

# e6845621bb9d42ccba141441bc8a5bc5
#: ../../../bottle.py:docstring of bottle.BaseRequest.headers:1
msgid ""
"A :class:`WSGIHeaderDict` that provides case-insensitive access to HTTP "
"request headers."
msgstr ""

# 7fc82cc9c0834b7da08e3b3860e1a9d6
#: ../../../bottle.py:docstring of bottle.BaseRequest.get_header:1
msgid "Return the value of a request header, or a given default value."
msgstr ""

# a4b6f975aa094fbdb49980bca6a4740c
#: ../../../bottle.py:docstring of bottle.BaseRequest.cookies:1
msgid ""
"Cookies parsed into a :class:`FormsDict`. Signed cookies are NOT decoded. "
"Use :meth:`get_cookie` if you expect signed cookies."
msgstr ""

# c715b1e442094837a714589e3798186f
#: ../../../bottle.py:docstring of bottle.BaseRequest.get_cookie:1
msgid ""
"Return the content of a cookie. To read a `Signed Cookie`, the `secret` must "
"match the one used to create the cookie (see :meth:`BaseResponse."
"set_cookie`). If anything goes wrong (missing cookie or wrong signature), "
"return a default value."
msgstr ""

# 92a7554d93d54dd4a8bba31a0067114b
#: ../../../bottle.py:docstring of bottle.BaseRequest.query:1
msgid ""
"The :attr:`query_string` parsed into a :class:`FormsDict`. These values are "
"sometimes called \"URL arguments\" or \"GET parameters\", but not to be "
"confused with \"URL wildcards\" as they are provided by the :class:`Router`."
msgstr ""

# 6e38df25852449a29bd683f33364b48f
#: ../../../bottle.py:docstring of bottle.BaseRequest.forms:1
msgid ""
"Form values parsed from an `url-encoded` or `multipart/form-data` encoded "
"POST or PUT request body. The result is returned as a :class:`FormsDict`. "
"All keys and values are strings. File uploads are stored separately in :attr:"
"`files`."
msgstr ""

# 521472a4de8345f98bc3c787393ad395
#: ../../../bottle.py:docstring of bottle.BaseRequest.params:1
msgid ""
"A :class:`FormsDict` with the combined values of :attr:`query` and :attr:"
"`forms`. File uploads are stored in :attr:`files`."
msgstr ""

# 7e4b95b0b3054f54a33b518c161f0f86
#: ../../../bottle.py:docstring of bottle.BaseRequest.files:1
msgid ""
"File uploads parsed from `multipart/form-data` encoded POST or PUT request "
"body. The values are instances of :class:`FileUpload`."
msgstr ""

# 0d0624fb0853462aab441d63adc1a3be
#: ../../../bottle.py:docstring of bottle.BaseRequest.json:1
msgid ""
"If the ``Content-Type`` header is ``application/json``, this property holds "
"the parsed content of the request body. Only requests smaller than :attr:"
"`MEMFILE_MAX` are processed to avoid memory exhaustion."
msgstr ""

# e365ed3beb1d44c4af25f40b7f4a8226
#: ../../../bottle.py:docstring of bottle.BaseRequest.body:1
msgid ""
"The HTTP request body as a seek-able file-like object. Depending on :attr:"
"`MEMFILE_MAX`, this is either a temporary file or a :class:`io.BytesIO` "
"instance. Accessing this property for the first time reads and replaces the "
"``wsgi.input`` environ variable. Subsequent accesses just do a `seek(0)` on "
"the file object."
msgstr ""

# 0f818e4e9be54445a5d849f282fbb91a
#: ../../../bottle.py:docstring of bottle.BaseRequest.GET:1
msgid "An alias for :attr:`query`."
msgstr ""

# 1cb7905e16964d0781a080367f6c4355
#: ../../../bottle.py:docstring of bottle.BaseRequest.POST:1
msgid ""
"The values of :attr:`forms` and :attr:`files` combined into a single :class:"
"`FormsDict`. Values are either strings (form values) or instances of :class:"
"`cgi.FieldStorage` (file uploads)."
msgstr ""

# 19474bb856ea4df983d033e944c07d91
#: ../../../bottle.py:docstring of bottle.BaseRequest.COOKIES:1
msgid "Alias for :attr:`cookies` (deprecated)."
msgstr ""

# 7a59ab7b57544482a2b7d0207c28b2cb
#: ../../../bottle.py:docstring of bottle.BaseRequest.url:1
msgid ""
"The full request URI including hostname and scheme. If your app lives behind "
"a reverse proxy or load balancer and you get confusing results, make sure "
"that the ``X-Forwarded-Host`` header is set correctly."
msgstr ""

# 6abcd81bc21d439a895207e630f97c52
#: ../../../bottle.py:docstring of bottle.BaseRequest.urlparts:1
msgid ""
"The :attr:`url` string as an :class:`urlparse.SplitResult` tuple. The tuple "
"contains (scheme, host, path, query_string and fragment), but the fragment "
"is always empty because it is not visible to the server."
msgstr ""

# f392bad831ff4fa88c9ea744d8bc950c
#: ../../../bottle.py:docstring of bottle.BaseRequest.fullpath:1
msgid "Request path including :attr:`script_name` (if present)."
msgstr ""

# aab6198ddcfc4e65bc1ab4b782683370
#: ../../../bottle.py:docstring of bottle.BaseRequest.query_string:1
msgid ""
"The raw :attr:`query` part of the URL (everything in between ``?`` and "
"``#``) as a string."
msgstr ""

# 946709194f5344eb842770c997f68202
#: ../../../bottle.py:docstring of bottle.BaseRequest.script_name:1
msgid ""
"The initial portion of the URL's `path` that was removed by a higher level "
"(server or routing middleware) before the application was called. This "
"script path is returned with leading and tailing slashes."
msgstr ""

# 42adec892f1849f18d69527e9fe788b7
#: ../../../bottle.py:docstring of bottle.BaseRequest.path_shift:1
msgid ""
"Shift path segments from :attr:`path` to :attr:`script_name` and vice versa."
msgstr ""

# 76e85971464548518acd9810d924f387
#: ../../../bottle.py:docstring of bottle.BaseRequest.content_length:1
msgid ""
"The request body length as an integer. The client is responsible to set this "
"header. Otherwise, the real length of the body is unknown and -1 is "
"returned. In this case, :attr:`body` will be empty."
msgstr ""

# 8dc2def91405473fbfd3e904686be740
#: ../../../bottle.py:docstring of bottle.BaseRequest.content_type:1
msgid "The Content-Type header as a lowercase-string (default: empty)."
msgstr ""

# 4d564e1fd934434181981c12030c784f
#: ../../../bottle.py:docstring of bottle.BaseRequest.is_xhr:1
msgid ""
"True if the request was triggered by a XMLHttpRequest. This only works with "
"JavaScript libraries that support the `X-Requested-With` header (most of the "
"popular libraries do)."
msgstr ""

# f42ba086381c4735b07013b78beabbe0
#: ../../../bottle.py:docstring of bottle.BaseRequest.is_ajax:1
msgid "Alias for :attr:`is_xhr`. \"Ajax\" is not the right term."
msgstr ""

# deb53a1c59ed428688d2ff4250cac9b2
#: ../../../bottle.py:docstring of bottle.BaseRequest.auth:1
msgid ""
"HTTP authentication data as a (user, password) tuple. This implementation "
"currently supports basic (not digest) authentication only. If the "
"authentication happened at a higher level (e.g. in the front web-server or a "
"middleware), the password field is None, but the user field is looked up "
"from the ``REMOTE_USER`` environ variable. On any errors, None is returned."
msgstr ""

# a6336e9837814b37a483c52185795a82
#: ../../../bottle.py:docstring of bottle.BaseRequest.remote_route:1
msgid ""
"A list of all IPs that were involved in this request, starting with the "
"client IP and followed by zero or more proxies. This does only work if all "
"proxies support the ```X-Forwarded-For`` header. Note that this information "
"can be forged by malicious clients."
msgstr ""

# 38ce3f106a16450e943f25ff7a586069
#: ../../../bottle.py:docstring of bottle.BaseRequest.remote_addr:1
msgid ""
"The client IP as a string. Note that this information can be forged by "
"malicious clients."
msgstr ""

# 259ef70a0d7b421ca8e468d9f1b71899
#: ../../../bottle.py:docstring of bottle.BaseRequest.copy:1
msgid "Return a new :class:`Request` with a shallow :attr:`environ` copy."
msgstr ""

# 21846efc4aa7410cbe609eaf42910736
#: ../../api.rst:136
msgid ""
"The module-level :data:`bottle.request` is a proxy object (implemented in :"
"class:`LocalRequest`) and always refers to the `current` request, or in "
"other words, the request that is currently processed by the request handler "
"in the current thread. This `thread locality` ensures that you can safely "
"use a global instance in a multi-threaded environment."
msgstr ""

# 10dd41c5686147648141a87cc6e82f77
#: ../../../bottle.py:docstring of bottle.LocalRequest:1
msgid ""
"A thread-local subclass of :class:`BaseRequest` with a different set of "
"attribues for each thread. There is usually only one global instance of this "
"class (:data:`request`). If accessed during a request/response cycle, this "
"instance always refers to the *current* request (even on a multithreaded "
"server)."
msgstr ""

# f7b6c6f51a9f412985f867be926b555d
#: ../../../bottle.py:docstring of bottle.LocalRequest.bind:1
msgid "Wrap a WSGI environ dictionary."
msgstr ""

# 3b6cc79779f144989921ddb4d71d4cb0
#: ../../../bottle.py:docstring of bottle.LocalRequest.environ:1
msgid "Thread-local property stored in :data:`_lctx.request_environ`"
msgstr ""

# 106092478f51479997b74ebeccd2ea06
#: ../../api.rst:145
msgid "The :class:`Response` Object"
msgstr ""

# bde46b3aad08469aa59a263616041959
#: ../../api.rst:147
msgid ""
"The :class:`Response` class stores the HTTP status code as well as headers "
"and cookies that are to be sent to the client. Similar to :data:`bottle."
"request` there is a thread-local :data:`bottle.response` instance that can "
"be used to adjust the `current` response. Moreover, you can instantiate :"
"class:`Response` and return it from your request handler. In this case, the "
"custom instance overrules the headers and cookies defined in the global one."
msgstr ""

# bc428c10813347058ee3eaefb7889f2b
#: ../../../bottle.py:docstring of bottle.BaseResponse:1
msgid "Storage class for a response body as well as headers and cookies."
msgstr ""

# 442a16db61924e0aa362afa4a37cefcd
#: ../../../bottle.py:docstring of bottle.BaseResponse:3
msgid ""
"This class does support dict-like case-insensitive item-access to headers, "
"but is NOT a dict. Most notably, iterating over a response yields parts of "
"the body and not the headers."
msgstr ""

# 83d9a04c39784dba9c1c644d8aa82ccd
#: ../../../bottle.py:docstring of bottle.BaseResponse:12
msgid ""
"Additional keyword arguments are added to the list of headers. Underscores "
"in the header name are replaced with dashes."
msgstr ""

# 4b9d3e8a27d24baeb19851f986eb9053
#: ../../../bottle.py:docstring of bottle.BaseResponse.copy:1
msgid "Returns a copy of self."
msgstr ""

# 20dd731104a14134b1cb816272da6bff
#: ../../../bottle.py:docstring of bottle.BaseResponse.status_line:1
msgid "The HTTP status line as a string (e.g. ``404 Not Found``)."
msgstr ""

# 24f7622dd04d43ca8cffb16b093785a1
#: ../../../bottle.py:docstring of bottle.BaseResponse.status_code:1
msgid "The HTTP status code as an integer (e.g. 404)."
msgstr ""

# e4b4d153add948bfa41eafc92be7b5b0
#: ../../../bottle.py:docstring of bottle.BaseResponse.status:1
msgid ""
"A writeable property to change the HTTP response status. It accepts either a "
"numeric code (100-999) or a string with a custom reason phrase (e.g. \"404 "
"Brain not found\"). Both :data:`status_line` and :data:`status_code` are "
"updated accordingly. The return value is always a status string."
msgstr ""

# 1c0fa51fff2f46b3ab5dbc423cd5b1ad
#: ../../../bottle.py:docstring of bottle.BaseResponse.headers:1
msgid ""
"An instance of :class:`HeaderDict`, a case-insensitive dict-like view on the "
"response headers."
msgstr ""

# 69dbca79c72646da9d204b40422bc2d9
#: ../../../bottle.py:docstring of bottle.BaseResponse.get_header:1
msgid ""
"Return the value of a previously defined header. If there is no header with "
"that name, return a default value."
msgstr ""

# c75d39ca206a4355ba6573abe3ccca7c
#: ../../../bottle.py:docstring of bottle.BaseResponse.set_header:1
msgid ""
"Create a new response header, replacing any previously defined headers with "
"the same name."
msgstr ""

# 800ed6de5292405980d7f0b42a2241b6
#: ../../../bottle.py:docstring of bottle.BaseResponse.add_header:1
msgid "Add an additional response header, not removing duplicates."
msgstr ""

# ea08ec78e270408ebd927b40ed16e915
#: ../../../bottle.py:docstring of bottle.BaseResponse.iter_headers:1
msgid ""
"Yield (header, value) tuples, skipping headers that are not allowed with the "
"current response status code."
msgstr ""

# 91f79c216555439f871d6ef43f6bda9f
#: ../../../bottle.py:docstring of bottle.BaseResponse.headerlist:1
msgid "WSGI conform list of (header, value) tuples."
msgstr ""

# 899832cd9ab0434481ab7dfa4a482d79
#: ../../../bottle.py:docstring of bottle.BaseResponse.expires:1
msgid "Current value of the 'Expires' header."
msgstr ""

# c9a8f8c5c29c4dfdbd5c77e910133ed9
#: ../../../bottle.py:docstring of bottle.BaseResponse.charset:1
msgid ""
"Return the charset specified in the content-type header (default: utf8)."
msgstr ""

# 3741634227334c49bc1c44bde23035ab
#: ../../../bottle.py:docstring of bottle.BaseResponse.COOKIES:1
msgid ""
"A dict-like SimpleCookie instance. This should not be used directly. See :"
"meth:`set_cookie`."
msgstr ""

# faf6b57b146a42399bbfada0234bf0b8
#: ../../../bottle.py:docstring of bottle.BaseResponse.set_cookie:1
msgid ""
"Create a new cookie or replace an old one. If the `secret` parameter is set, "
"create a `Signed Cookie` (described below)."
msgstr ""

# f24ed8fe5dc64069af63525064bfc57f
#: ../../../bottle.py:docstring of bottle.BaseResponse.set_cookie:8
msgid ""
"Additionally, this method accepts all RFC 2109 attributes that are supported "
"by :class:`cookie.Morsel`, including:"
msgstr ""

# 16e1167be236401f91bfc40593afdd71
#: ../../../bottle.py:docstring of bottle.BaseResponse.set_cookie:20
msgid ""
"If neither `expires` nor `max_age` is set (default), the cookie will expire "
"at the end of the browser session (as soon as the browser window is closed)."
msgstr ""

# 13a85a16b98a4e00b6567058431481ea
#: ../../../bottle.py:docstring of bottle.BaseResponse.set_cookie:24
msgid ""
"Signed cookies may store any pickle-able object and are cryptographically "
"signed to prevent manipulation. Keep in mind that cookies are limited to 4kb "
"in most browsers."
msgstr ""

# fd074f58f7a446bcb51b788462b67465
#: ../../../bottle.py:docstring of bottle.BaseResponse.set_cookie:28
msgid ""
"Warning: Signed cookies are not encrypted (the client can still see the "
"content) and not copy-protected (the client can restore an old cookie). The "
"main intention is to make pickling and unpickling save, not to store secret "
"information at client side."
msgstr ""

# 5ad4fdb60e0146d7bdecb10b8f3e05cb
#: ../../../bottle.py:docstring of bottle.BaseResponse.delete_cookie:1
msgid ""
"Delete a cookie. Be sure to use the same `domain` and `path` settings as "
"used to create the cookie."
msgstr ""

# ae8c905c87694bf3a2ea42d09cfea02c
#: ../../../bottle.py:docstring of bottle.LocalResponse:1
msgid ""
"A thread-local subclass of :class:`BaseResponse` with a different set of "
"attribues for each thread. There is usually only one global instance of this "
"class (:data:`response`). Its attributes are used to build the HTTP response "
"at the end of the request/response cycle."
msgstr ""

# f6ace90a9670484d8a866dea8cd8b38a
#: ../../../bottle.py:docstring of bottle.LocalResponse.body:1
msgid "Thread-local property stored in :data:`_lctx.response_body`"
msgstr ""

# 8ca709f8313b482da65c7268859ae250
#: ../../api.rst:159
msgid ""
"The following two classes can be raised as an exception. The most noticeable "
"difference is that bottle invokes error handlers for :class:`HTTPError`, but "
"not for :class:`HTTPResponse` or other response types."
msgstr ""

# d3a8f15c0c9c4c8697fdb8ae365c3b21
#: ../../../bottle.py:docstring of bottle.HTTPResponse.output:1
msgid "Alias for .body"
msgstr ""

# 50180b5649a744c987ed84c266b7a9bd
#: ../../api.rst:171
msgid "Templates"
msgstr ""

# b4f775e4de0b4249b8e33108e33a7a49
#: ../../api.rst:173
msgid ""
"All template engines supported by :mod:`bottle` implement the :class:"
"`BaseTemplate` API. This way it is possible to switch and mix template "
"engines without changing the application code at all."
msgstr ""

# 975585fd7dca4b0a8572be0fafcda6be
#: ../../../bottle.py:docstring of bottle.BaseTemplate:1
msgid "Base class and minimal API for template adapters"
msgstr ""

# a89e857e507644bdaf8d55dc717c5d68
#: ../../../bottle.py:docstring of bottle.BaseTemplate.__init__:1
msgid ""
"Create a new template. If the source parameter (str or buffer) is missing, "
"the name argument is used to guess a template filename. Subclasses can "
"assume that self.source and/or self.filename are set. Both are strings. The "
"lookup, encoding and settings parameters are stored as instance variables. "
"The lookup parameter stores a list containing directory paths. The encoding "
"parameter should be used to decode byte strings or files. The settings "
"parameter contains a dict for engine-specific settings."
msgstr ""

# 2490a05b3cfe487a9cd697defe07282d
#: ../../../bottle.py:docstring of bottle.BaseTemplate.search:1
msgid ""
"Search name in all directories specified in lookup. First without, then with "
"common extensions. Return first hit."
msgstr ""

# 680a8fe096e741d9bfa6fe53086209dd
#: ../../../bottle.py:docstring of bottle.BaseTemplate.global_config:1
msgid "This reads or sets the global settings stored in class.settings."
msgstr ""

# 55ecc208fadd4c089c872170477a9f0c
#: ../../../bottle.py:docstring of bottle.BaseTemplate.prepare:1
msgid ""
"Run preparations (parsing, caching, ...). It should be possible to call this "
"again to refresh a template or to update settings."
msgstr ""

# 0ab4a6d80b044ddf87397b0f587d9fe0
#: ../../../bottle.py:docstring of bottle.BaseTemplate.render:1
msgid ""
"Render the template with the specified local variables and return a single "
"byte or unicode string. If it is a byte string, the encoding must match self."
"encoding. This method must be thread-safe! Local variables may be provided "
"in dictionaries (args) or directly, as keywords (kwargs)."
msgstr ""

# 6b1c141cf449499b9ae972b7975d2a3b
#: ../../../bottle.py:docstring of bottle.view:1
msgid ""
"Decorator: renders a template for a handler. The handler can control its "
"behavior like that:"
msgstr ""

# 89e057215ad24a5f97966f920f26ff3c
#: ../../../bottle.py:docstring of bottle.view:4
msgid "return a dict of template vars to fill out the template"
msgstr ""

# 688fd6bb93f348a287e476ec16da2180
#: ../../../bottle.py:docstring of bottle.view:5
msgid ""
"return something other than a dict and the view decorator will not process "
"the template, but return the handler result as is. This includes returning a "
"HTTPResponse(dict) to get, for instance, JSON with autojson or other "
"castfilters."
msgstr ""

# c30940ff52eb4578a46ebaa485189c2f
#: ../../../bottle.py:docstring of bottle.template:1
msgid ""
"Get a rendered template as a string iterator. You can use a name, a filename "
"or a template string as first parameter. Template rendering arguments can be "
"passed as dictionaries or directly (as keyword arguments)."
msgstr ""

# 24d18841c1104f21bc1e523a11d37f9b
#: ../../api.rst:184
msgid ""
"You can write your own adapter for your favourite template engine or use one "
"of the predefined adapters. Currently there are four fully supported "
"template engines:"
msgstr ""

# 0b18f89b92bd47cea75484f063b4a305
#: ../../api.rst:187
msgid "Class"
msgstr ""

# e61c4e15bcac42e4b82f9dca7f257058
#: ../../api.rst:187
msgid "URL"
msgstr ""

# 1d62c00724264840af5a38445a2f2046
#: ../../api.rst:187
msgid "Decorator"
msgstr ""

# f358c8038cb54d25a612ce662ac57e66
#: ../../api.rst:187
msgid "Render function"
msgstr ""

# b53044adf2c64defa1fc407003b81f86
#: ../../api.rst:189
msgid ":class:`SimpleTemplate`"
msgstr ""

# a1a04a507e14417ab3539197b18afa4b
#: ../../api.rst:189
msgid ":doc:`stpl`"
msgstr ""

# 33dca0a76e23412abee840c3dbd6dcf6
#: ../../api.rst:189
msgid ":func:`view`"
msgstr ""

# 1e86243291384e2d92ed890830d4d338
#: ../../api.rst:189
msgid ":func:`template`"
msgstr ""

# 4d3a8eb5e32d40fda44342622bba81b8
#: ../../api.rst:190
msgid ":class:`MakoTemplate`"
msgstr ""

# 6c423025f4cb4d4a801b605bafecb026
#: ../../api.rst:190
msgid "http://www.makotemplates.org"
msgstr ""

# bc162e8800634503978fee1cfc325f3c
#: ../../api.rst:190
msgid ":func:`mako_view`"
msgstr ""

# e777be7d76044134b1b534e5612a397f
#: ../../api.rst:190
msgid ":func:`mako_template`"
msgstr ""

# 1169be7e540d4b028108f0437d1fb791
#: ../../api.rst:191
msgid ":class:`CheetahTemplate`"
msgstr ""

# 81026d25ce3948468a6e4f7ff2eb49ac
#: ../../api.rst:191
msgid "http://www.cheetahtemplate.org/"
msgstr ""

# a5003711086e4b729b97068f1d5e3d93
#: ../../api.rst:191
msgid ":func:`cheetah_view`"
msgstr ""

# 41355d3738e145589e85992557dd818e
#: ../../api.rst:191
msgid ":func:`cheetah_template`"
msgstr ""

# 4cecefe7caf84f7bbbf14deba520fd62
#: ../../api.rst:192
msgid ":class:`Jinja2Template`"
msgstr ""

# a2dc200da35848f5b9b36d8d0cea1f33
#: ../../api.rst:192
msgid "http://jinja.pocoo.org/"
msgstr ""

# 19500baf956c445fac89420ee8b30d57
#: ../../api.rst:192
msgid ":func:`jinja2_view`"
msgstr ""

# 1a5f61a4b9aa4aa0a2933ef65e5cb88f
#: ../../api.rst:192
msgid ":func:`jinja2_template`"
msgstr ""

# a113494ab5c348cdbb1d5c7b9533f062
#: ../../api.rst:195
msgid ""
"To use :class:`MakoTemplate` as your default template engine, just import "
"its specialised decorator and render function::"
msgstr ""
